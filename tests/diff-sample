commit 53cafd8665e86564a4fa1297c8c12e4c028ddcd1
Author: Gustavo Brand√£o <gugabgta3@gmail.com>
Date:   Tue Jan 24 16:24:15 2023 -0300

    division in modules

diff --git a/src/cli.rs b/src/cli.rs
new file mode 100644
index 0000000..ec70078
--- /dev/null
+++ b/src/cli.rs
@@ -0,0 +1,21 @@
+use clap::{Parser, arg, /* Command */};
+
+#[derive(Parser)]
+pub struct Cli {
+    // Optional pattern
+    #[arg(short = 'p', long = "pattern", default_value ="")]
+    pub pattern: String,
+
+    #[arg(long)]
+    pub staged: bool,
+}
+
+/*
+let re = Regex::new(&args.pattern).unwrap();
+    for line in stdin.lock().lines() {
+        let line = line.expect("Could not read line from standard in");
+        if re.is_match(&line) {
+            println!("{}", line);
+        }
+    }
+*/
diff --git a/src/git.rs b/src/git.rs
new file mode 100644
index 0000000..e690d67
--- /dev/null
+++ b/src/git.rs
@@ -0,0 +1,87 @@
+use regex::Regex;
+use std::process::{Command, Output};
+use clap::Parser;
+
+use crate::cli::Cli;
+// mod cli::Cli;
+pub struct Diff {
+    _files: Vec<DiffFile>,
+    _new_lines: Vec<String>,
+    _cagadas: Vec<Cagada>
+}
+
+impl Diff {
+    pub fn get () /* -> Self */ {
+        let args: Cli = Cli::parse();
+        let mut command: Command = Command::new("git");
+
+        command.arg("diff");
+        if args.staged {
+            command.arg("--staged");
+        }
+
+        let _output: Output = command.output().expect("failed to execute process");
+
+        let files: Vec<DiffFile> = DiffFile::get();
+        println!("{:?}", files);
+        // let stdout = String::from_utf8(output.stdout).unwrap();
+        // Diff {}
+    }
+}
+
+#[derive(Debug)]
+struct DiffFile {
+    name: String,
+    new: bool,
+    deleted: bool,
+    modified: bool,
+}
+
+impl DiffFile {
+    fn get() -> Vec<DiffFile> {
+        // let pattern: &str = r"diff.--git.a/(.*?) b/";
+        // let re: Regex = Regex::new(r"([MDA])\\t(.*)").unwrap();
+        let re: Regex = Regex::new(r":100644 100644 b0a8caa 0000000 M\tsrc/main.rs\n").unwrap();
+        let std = re.captures(r"M\t").unwrap();
+        let text: String =  DiffFile::raw_data();
+        println!("{:?}", text);
+        let mut res: Vec<DiffFile> = vec![];
+        println!("{:?}", re.captures(&text).unwrap_or(std));
+
+        // for captures in re.captures_iter(&text) {
+        //     let name = captures.get(1).unwrap().as_str();
+        //     res.push(DiffFile {
+        //         name: name.to_owned(),
+        //         new: false,
+        //         deleted: false,
+        //         modified: false,
+        //     })
+        // }
+
+        res.push(DiffFile {
+            name: "aa".to_owned(),
+            new: false,
+            deleted: false,
+            modified: false,
+        });
+        res
+    }
+
+    fn raw_data() -> String {
+        let args: Cli = Cli::parse();
+        let mut command: Command = Command::new("git");
+        command.arg("diff");
+        command.arg("--raw");
+        if args.staged {
+            command.arg("--staged");
+        }
+        let output: Output = command.output().unwrap();
+        String::from_utf8(output.stdout).unwrap_or("".to_owned())
+    }
+}
+
+struct Cagada {
+    _line: i32,
+    _file: DiffFile,
+    _regex_capture: String,
+}
diff --git a/src/main.rs b/src/main.rs
index b0a8caa..37545ca 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -3,90 +3,11 @@
 #[warn(unused_variables)]
 #[warn(dead_code)]

-use std::process::{Command, Output};
-use regex::Regex;
-use clap::{Parser, arg, /* Command */};
+mod git;
+mod cli;

 fn main() {
     // let args = Cli::parse();
     // println!("{}", String::from(args.pattern));
-    Diff::get();
-
-}
-
-struct Diff {
-    files: Vec<DiffFile>,
-    new_lines: Vec<String>,
-    cagadas: Vec<Cagada>
-}
-
-#[derive(Debug)]
-struct DiffFile {
-    name: String,
-    new: bool,
-    deleted: bool,
-    modified: bool,
-}
-
-impl Diff {
-    fn get () /* -> Self */ {
-        let args: Cli = Cli::parse();
-        let mut command: Command = Command::new("git");
-
-        command.arg("diff");
-        if args.staged {
-            command.arg("--staged");
-        }
-
-        let output: Output = command.output().expect("failed to execute process");
-
-        let files: Vec<DiffFile> = DiffFile::get(output);
-        println!("{:?}", files);
-        // let stdout = String::from_utf8(output.stdout).unwrap();
-        // Diff {}
-    }
-}
-
-impl DiffFile {
-    fn get(output: Output) -> Vec<DiffFile> {
-        // diff --git a/gestao_financeira/faturas/view/index.php b/gestao_financeira/faturas/view/index.php
-        let pattern: &str = r"diff.--git.a/(.*?) b/";
-        // let pattern: &str = r".*";
-        let re: Regex = Regex::new(pattern).unwrap();
-        let text: String =  String::from_utf8(output.stdout).unwrap();
-        let mut res: Vec<DiffFile> = vec![];
-        for captures in re.captures_iter(&text) {
-            let name = captures.get(1).unwrap().as_str();
-            res.push(DiffFile {
-                name: name.to_owned(),
-                new: false,
-                deleted: false,
-                modified: false,
-            })
-        }
-        res
-    }
-}
-
-struct Cagada {
-
-}
-
-#[derive(Parser)]
-struct Cli {
-    // Optional pattern
-    #[arg(short = 'p', long = "pattern", default_value ="")]
-    pattern: String,
-
-    #[arg(short, long)]
-    staged: bool,
+    git::Diff::get();
 }
-/*
-let re = Regex::new(&args.pattern).unwrap();
-    for line in stdin.lock().lines() {
-        let line = line.expect("Could not read line from standard in");
-        if re.is_match(&line) {
-            println!("{}", line);
-        }
-    }
-*/